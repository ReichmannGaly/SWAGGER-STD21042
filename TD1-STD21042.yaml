openapi: 3.0.1
info:
  title: STD21042 API
  description: Global description of my API
  version: 1.0.0-oas3
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ReichmannGaly/STD21042/1.0.0
  - url: https://STD21042.com
tags:
  - name: Students
  - name: Courses
paths:
  /students:
    get:
      tags:
        - Students
      operationId: getStudents
      summary: Get all students
      description: Get all students with details
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '400':
          description: Bad request
    post:
      tags:
        - Students
      operationId: createStudent
      summary: Create new student
      description: Create new student
      requestBody:
        description: Student to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudent'
        required: true
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Bad request
  /students/{id}:
    get:
      tags:
        - Students
      operationId: getStudent{id}
      summary: Get a student
      description: Get a student by identifier
      parameters:
        - name: id
          in: path
          description: The identified student
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Specified student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
    put:
      tags: 
        - Students
      operationId: putStudent{id}
      summary: Update a student
      description: update a specified student
      parameters: 
        - name: id
          in: path
          description: id of the student to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Student to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        '200': 
          description: Update success
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Student'
        '400':
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    delete:
      tags: 
        - Students
      operationId: deleteStudent/{id}
      summary: Delete a student
      description: Delete a specified student 
      parameters: 
        - name: id
          in: path
          description: id of the student to delete
          required: true
          schema: 
            type: integer
      responses: 
        '200':
          description: Student deleted successfully
        '400': 
          description: Parameter id is missing
        '404':
          description: Student not found
  /courses:
    get:
      tags:
        - Courses
      operationId: getCourse
      summary: Get all courses
      description: Get all courses with details
      parameters:
        - name: page
          in: query
          description: page
          required: true
          schema:
            type: integer
        - name: page size
          in: query
          description: page size
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
    post:
      tags:
        - Courses
      operationId: createCourse
      summary: Create new course
      description: Create new course
      requestBody:
        description: Course to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '200':
          description: The created course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
  /courses/{id}:
    get:
      tags:
        - Courses
      operationId: getCourse/{id}
      summary: Get a course
      description: Get a course by identifier
      parameters:
        - name: id
          in: path
          description: id of the course to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a specified course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
components:
  schemas:
    CreateStudent:
      type: object
      properties:
        name:
          type: string
          example: Rakoto
        birth_date:
          type: string
          format: date
          example: '2022-01-01'
    Student:
      allOf:
        - $ref: '#/components/schemas/CreateStudent'
      type: object
      properties:
        id:
          type: integer
          example: 10
    Course:
      type: object
      properties:
        name:
          type: string
          example: EL1
        teacher:
          type: string
          example: RAKOTO
        createDatetime:
          type: string
          format: date
          example: '2021-11-08'
    CourseId:
      allOf:
        - $ref: '#/components/schemas/Course'
      type: object
      properties:
        id:
          type: integer
          example: 10
    BadRequest:
      type: object
      properties:
        code:
          example: 400_BAD_REQUEST
        message:
          example: Parameters are missing