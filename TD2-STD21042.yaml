openapi: 3.0.1
info:
  title: STD21042-TD2 API
  description: API of a cinema management
  version: 1.0.0
servers:
  - url: https://STD21042.com
paths:
  /rooms: 
    get:
      tags:
        - Rooms
      operationId: getRooms
      summary: Get all rooms
      description: Get the list of all rooms
      responses: 
        '200': 
          description: List of all rooms
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '400':
          description: Bad request
  /room/{id}:
    get: 
      tags: 
        - Rooms
      operationId: getRoom/{id}
      summary: Get a room
      description: Get a specified room
      parameters: 
        - name: id
          in: path
          description: The identified room
          required: true
          schema: 
            type: string
            
      responses:
        '200':
          description: Specified room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
    patch:
      tags:
        - Rooms
      summary: update a specified room
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              changeCapacity:
                value:
                  capacity: 200
      responses: 
        '200':
          description: Update success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
  /movies:
    get:
      tags:
        - Movies
      operationId: getMovies
      summary: Get all movies
      description: Get the list of all movies
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          required: true
        - name: page size
          in: query
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: List of all movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request
    post:
      tags:
        - Movies
      operationId: createMoviet
      summary: Create new movie
      description: Create new movie
      requestBody:
        description: Movie to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMovie'
        required: true
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request
  /movies/{id}:
    get:
      tags:
        - Movies
      operationId: getMovie{id}
      summary: Get a movie
      description: Get a movie by identifier
      parameters:
        - name: id
          in: path
          description: The identified movie
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Specified movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
    put:
      tags: 
        - Movies
      operationId: putMovie{id}
      summary: Update a movie
      description: update a specified movie
      parameters: 
        - name: id
          in: path
          description: id of the movie to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Movie to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      responses:
        '200': 
          description: Update success
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    patch:
      tags: 
        - Movies
      operationId: patchMovies/{id}
      summary: Update movie values
      description:  |
       Choose between those parameters
        - title
        - duration
        - summary
        - producer
        - release_date
      parameters: 
        - name: id
          in: path 
          schema: 
            type: integer
          required: true
      requestBody: 
        content: 
          application/json:
            schema:
              type: object
            examples: 
              changeTitle: 
                value:
                  title: "string"
              changeSummary:
                value:
                  summary: "string"
              changeProducer:
                value:
                  producer: "string"
      responses:
        '200':
          description: Patch success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    delete:
      tags: 
        - Movies
      operationId: deleteMovie/{id}
      summary: Delete a movie
      description: Delete a specified movie
      parameters: 
        - name: id
          in: path
          description: id of the movie to delete
          required: true
          schema: 
            type: integer
      responses: 
        '200':
          description: Movie deleted successfully
        '400': 
          description: Parameter id is missing
        '404':
          description: Movie not found
  /projections:
    get:
      tags: 
        - Projections
      operationId: getProjections
      summary: Get all projections
      parameters:
        - name: from
          in: query
          schema:
            type: string
            format: date
        - name: to
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of all Projections
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Projection'
        '400':
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    put:
      tags:
        - "Projections"
      summary: update entirely a projection
      requestBody:
        description: new film
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Projection'
      responses:
        200:
          description: Update success
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Projection'
        400:
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    post: 
      tags:
        - Projections
      summary: Create a new Projection
      operationId: postProjection
      requestBody:
        required: true
        description: |
          Specify the
          - filmId
          - roomId
          - date
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProjection'
      responses:
        200:
          description: Update success
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Projection'
        400:
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    delete:
      tags:
        - "Projections"
      summary: delete a specified projection
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Projection deleted successfully
        '400': 
          description: Parameter id is missing
        '404':
          description: Projection not found
  /categories:
    get:
      tags:
        - "Categories"
      summary: Get all category
      operationId: getCategories
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Category'
        400:
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    put:
      tags:
        - "Categories"
      summary: modifies entirely a Categories list
      requestBody:
        description: new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    post:
      tags:
        - "Categories"
      summary: creates a new category
      requestBody:
        required: true
        description: new film
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCategory'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    patch:
      summary: modify partialy 
      tags:
        - "Categories"
      description: | 
        Possible changes on:
        * name: change category
        * film: change film
        * id: change categoryId
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Category'
            examples:
              changeName:
                summary: Change some category
                value:
                - name: "string"
                  filmId: 1
                - name: "string"
                  filmId: 2
              changeId:
                summary: Change id
                value:
                - id: 1
                  title: "string"
                - id: 2
                  title: "string"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
  /categories/{id}:
    get:
      tags:
        - "Categories"
      summary: get the category by specified id
      operationId: getCategory
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    put:
      tags:
        - "Categories"
      summary: allows you to modify category data except its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        description: new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCategory'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
    delete:
      tags:
        - "Categories"
      summary: deletes a category by referring to its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Projection deleted successfully
        '400': 
          description: Parameter id is missing
        '404':
          description: Projection not found
  /calendar:
    get:
      tags:
        - "Calendar"
      summary: get a calendar
      operationId: getCalendar
      parameters:
        - name: date
          in: query
          schema:
            type: string
            format: date
          required: true
      responses:
        200:
          description: calendar
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ProjectionPerDay'
        400: 
          description: Bad request
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/BadRequest'
components:
  schemas:
    CreateMovie:
      type: object
      properties:
        title:
          type: string
          example: Avengers Endgame
        duration:
          type: string
          example: 100 min
        summary:
          type: string
          example: Avengers need to find a way to beat Thanos
        producer: 
          type: string
          example: Anthony Russo
        release_date:
          type: string
          format: date
          example: '2022-01-01'
    Movie:
      allOf:
        - $ref: '#/components/schemas/CreateMovie'
      type: object
      properties:
        id:
          type: integer
          example: 10
    Room:
      type: object
      properties:
        id:
          type: string
          enum: 
            - A
            - B
        capacity:
          type: integer
          example: 100
    BadRequest:
      type: object
      properties:
        code:
          example: 400_BAD_REQUEST
        message:
          example: Parameters are missing
    NewProjection:
      type: object
      properties:
        filmId:
          type: integer
          example: 1
        roomId:
          type: string
          default: A
          enum:
            - A
            - B
        date:
          type: string
          format: date-time
    Projection:
      type: object
      properties:
        projectionId:
          type: number
          example: 1
        time:
          type: string
          format: date-time
        film:
          type: object
          allOf:
            - $ref: '#/components/schemas/Movie'
        room:
          type: object
          allOf:
            - $ref: '#/components/schemas/Room'
    NewCategory:
      type: object
      properties:
        name:
          type: string
          example: "Action"
    Category:
      type: object
      properties:
        id:
          type: number
          example: '1'
      allOf:
        - $ref: '#/components/schemas/NewCategory'
    ProjectionPerDay:
      type: object
      properties:
        monday:
          type: array
          items:
            allOf: 
              - $ref: '#/components/schemas/Projection'
        tuesday: 
          type: array
          items:
            allOf: 
              - $ref: '#/components/schemas/Projection'
        wednesday: 
          type: array
          items:
            allOf: 
              - $ref: '#/components/schemas/Projection'
        thursday: 
          type: array
          items:
            allOf: 
              - $ref: '#/components/schemas/Projection'
        friday: 
          type: array
          items:
            allOf: 
              - $ref: '#/components/schemas/Projection'
        saturday: 
          type: array
          items:
            allOf: 
              - $ref: '#/components/schemas/Projection'
        sunday: 
          type: array
          items:
            allOf: 
              - $ref: '#/components/schemas/Projection'